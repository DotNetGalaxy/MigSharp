<?xml version="1.0"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <id>MigSharp</id>
    <version>3.1.1</version>
    <title>Mig#</title>
    <authors>dradovic</authors>
    <owners />
    <licenseUrl>https://github.com/dradovic/MigSharp/blob/master/LICENSE.txt</licenseUrl>
    <projectUrl>https://github.com/dradovic/MigSharp</projectUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>Write database migrations and/or schema modifications in your favorite .NET language and let Mig# generate the platform-dependent SQL code and update your schema. Features: fluent interface, automatic versioning, multi-module support, scripting to SQL files, validation framework for portability issues, suport for SQL Server, Oracle, MySQL, Teradata, SQLite, legacy integration</description>
    <summary>A .NET framework for multi-database platform migrations, versioning and schema modifications</summary>
    <tags>mig# migsharp schema migration database agnostic fluent versioning sql oracle teradata sqlite mysql</tags>
    <releaseNotes>
3.1.1
BUG FIXES:
- SQL Server: dropping or renaming a default constraint was not prefixing the schema of the corresponding table
- 3.1.0 was wronly built in our CI environment and was requiring .NET 4.6.1 bindings (string.Format)
3.1.0
- Added support for current UTC datetime as default (#37)
- Added support for current datetimeoffset as default (SQL Server only)
- New API to selectively execute pending migrations (see: IMigrationBatch.RemoveAll)
- Removed support for SQL Server CE (deprecated by Microsoft in 2013)
BUG FIX:
- SQLite: using HavingCurrentDateTimeAsDefault correctly set the date time to local format instead of GMT/UTC
3.0.0
- New API dedicated to schema altering (see: DbAlterer; replaces Migritor.BypassMigration)
- Support for SQL Server Schemata (#33)
  - Migrations can specify to use their Module name as the default schema
  - Versioning table can reside in a custom schema too
  - Generate.exe reads out schema names too
- Keeps tracks of ordering of commands even when return types are stored in variables (#60)
- Migration metadata is exposed on the callback context
- Mig# now targets .NET 4.5
BREAKING CHANGES:
- IMPORTANT: database platforms to be included in compatibility validations must be specified explicitly in the options. Mig# cannot (and therefore should not) make any assumptions about your setup.
- A new type called DbPlatform has been introduced to specify database platforms (replaces ProviderNames); providers are now identified by platform, major version, and driver

Note: Mig# uses "Semantic Versioning" http://semver.org/ (by Tom Preston-Werner)
    </releaseNotes>
  </metadata>
  <files>
    <file src="..\bin\Release\MigSharp.dll" target="lib\net45" />
    <file src="..\bin\Release\MigSharp.xml" target="lib\net45" />
    <file src="..\bin\Release\Migrate.exe" target="tools\net45" />
    <file src="..\bin\Release\Migrate.exe.config" target="tools\net45" />
    <file src="..\bin\Release\Generate.exe" target="tools\net45" />
    <file src="..\bin\Release\Generate.exe.config" target="tools\net45" />
  </files>
</package>